// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZENO_API_II.Data;

#nullable disable

namespace ZENO_API_II.Migrations
{
    [DbContext(typeof(ZenoDbContext))]
    [Migration("20250802155552_AddAuthenticationFields")]
    partial class AddAuthenticationFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZENO_API_II.Models.AssistantLocal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OpenAI_Id")
                        .HasColumnType("text");

                    b.Property<Guid>("UserLocalId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserLocalId")
                        .IsUnique();

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("ZENO_API_II.Models.ChatThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssistantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OpenAI_ThreadId")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AssistantId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("ZENO_API_II.Models.CreditTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditTransactions");
                });

            modelBuilder.Entity("ZENO_API_II.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ZENO_API_II.Models.OpenAIRunLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AssistantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreditsCharged")
                        .HasColumnType("integer");

                    b.Property<int>("EstimatedCompletionTokens")
                        .HasColumnType("integer");

                    b.Property<double>("EstimatedCostUSD")
                        .HasColumnType("double precision");

                    b.Property<int>("PromptTokens")
                        .HasColumnType("integer");

                    b.Property<string>("RunId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ThreadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("OpenAIRunLogs");
                });

            modelBuilder.Entity("ZENO_API_II.Models.UserLocal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastCreditUpdate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OAuthProvider")
                        .HasColumnType("text");

                    b.Property<string>("OAuthRefreshToken")
                        .HasColumnType("text");

                    b.Property<string>("OAuthSubjectId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OAuthTokenExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZENO_API_II.Models.AssistantLocal", b =>
                {
                    b.HasOne("ZENO_API_II.Models.UserLocal", "User")
                        .WithOne("Assistant")
                        .HasForeignKey("ZENO_API_II.Models.AssistantLocal", "UserLocalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZENO_API_II.Models.ChatThread", b =>
                {
                    b.HasOne("ZENO_API_II.Models.AssistantLocal", "Assistant")
                        .WithMany("Threads")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistant");
                });

            modelBuilder.Entity("ZENO_API_II.Models.CreditTransaction", b =>
                {
                    b.HasOne("ZENO_API_II.Models.UserLocal", "User")
                        .WithMany("CreditTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ZENO_API_II.Models.Message", b =>
                {
                    b.HasOne("ZENO_API_II.Models.ChatThread", "Thread")
                        .WithMany("Messages")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("ZENO_API_II.Models.AssistantLocal", b =>
                {
                    b.Navigation("Threads");
                });

            modelBuilder.Entity("ZENO_API_II.Models.ChatThread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ZENO_API_II.Models.UserLocal", b =>
                {
                    b.Navigation("Assistant")
                        .IsRequired();

                    b.Navigation("CreditTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
